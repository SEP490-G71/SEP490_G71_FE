import React, { useEffect, useState } from "react";
import {
  TextInput,
  Button,
  Paper,
  Grid,
  Group,
  Loader,
  Select,
} from "@mantine/core";
import { useForm, isEmail } from "@mantine/form";
import { useSettingAdminService } from "../../../hooks/setting/useSettingAdminService";
import { PaginationSizeInput } from "../../../components/admin/settings/PaginationSizeInput";

// Ki·ªÉu d·ªØ li·ªáu cho danh s√°ch ng√¢n h√†ng
interface BankOption {
  value: string;
  label: string;
}

export const SettingAdminPage: React.FC = () => {
  const { setting, loading, updateSetting } = useSettingAdminService();
  const [bankOptions, setBankOptions] = useState<BankOption[]>([]);
  const [banksLoading, setBanksLoading] = useState<boolean>(false);

  const form = useForm({
    initialValues: {
      hospitalName: "",
      hospitalPhone: "",
      hospitalAddress: "",
      hospitalEmail: "",
      bankAccountNumber: "",
      bankCode: "",
      paginationSizeList: [] as number[],
      latestCheckInMinutes: "", // üîß Th√™m tr∆∞·ªùng ph√∫t ƒë·∫øn tr·ªÖ
    },
    validate: {
      hospitalName: (v) => (v ? null : "Th√¥ng tin b·∫Øt bu·ªôc"),
      hospitalPhone: (v) => (v ? null : "Th√¥ng tin b·∫Øt bu·ªôc"),
      hospitalAddress: (v) => (v ? null : "Th√¥ng tin b·∫Øt bu·ªôc"),
      bankAccountNumber: (v) => (v ? null : "Th√¥ng tin b·∫Øt bu·ªôc"),
      bankCode: (v) => (v ? null : "Vui l√≤ng ch·ªçn ng√¢n h√†ng"),
      hospitalEmail: (v) => (v && !isEmail(v) ? "Email kh√¥ng h·ª£p l·ªá" : null),
      paginationSizeList: (values) =>
        values.length === 0 || values.some((v) => v < 1 || v > 200)
          ? "Gi√° tr·ªã ph·∫£i t·ª´ 1 ƒë·∫øn 200"
          : null,
      latestCheckInMinutes: (v) =>
        !v || isNaN(Number(v)) || Number(v) < 1 || Number(v) > 120
          ? "Ph√∫t ƒë·∫øn tr·ªÖ ph·∫£i t·ª´ 1 ƒë·∫øn 60"
          : null,
    },
  });

  useEffect(() => {
    if (setting) {
      form.setValues({
        ...setting,
        hospitalEmail: setting.hospitalEmail ?? "",
        latestCheckInMinutes: setting.latestCheckInMinutes?.toString() || "",
      });
    }
  }, [setting]);

  useEffect(() => {
    async function fetchBanks() {
      setBanksLoading(true);
      try {
        const res = await fetch("/vietqr-banks.json");
        const data: { bank_code: string; bank_name: string }[] =
          await res.json();
        setBankOptions(
          data
            .sort((a, b) => a.bank_name.localeCompare(b.bank_name))
            .map((b) => ({
              value: b.bank_code,
              label: `${b.bank_name} (${b.bank_code})`,
            }))
        );
      } catch (err) {
        console.error("Kh√¥ng l·∫•y ƒë∆∞·ª£c danh s√°ch ng√¢n h√†ng", err);
      } finally {
        setBanksLoading(false);
      }
    }
    fetchBanks();
  }, []);

  const handleSubmit = (values: typeof form.values) => {
    updateSetting({
      ...values,
      latestCheckInMinutes: Number(values.latestCheckInMinutes),
      paginationSizeList: values.paginationSizeList.map(Number),
    });
  };

  if (loading) return <Loader className="mx-auto mt-10" />;

  return (
    <div className="w-full px-8 py-6">
      <h1 className="text-2xl font-bold mb-4">C√†i ƒë·∫∑t h·ªá th·ªëng</h1>
      <Paper shadow="xs" radius="md" p="lg" withBorder className="w-full">
        <form onSubmit={form.onSubmit(handleSubmit)}>
          <Grid gutter="md">
            <Grid.Col span={{ base: 12, md: 6 }}>
              <TextInput
                label={
                  <span>
                    T√™n b·ªánh vi·ªán <span style={{ color: "red" }}>*</span>
                  </span>
                }
                placeholder="Nh·∫≠p t√™n b·ªánh vi·ªán"
                {...form.getInputProps("hospitalName")}
              />
            </Grid.Col>

            <Grid.Col span={{ base: 12, md: 6 }}>
              <TextInput
                label={
                  <span>
                    S·ªë ƒëi·ªán tho·∫°i <span style={{ color: "red" }}>*</span>
                  </span>
                }
                placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                {...form.getInputProps("hospitalPhone")}
              />
            </Grid.Col>

            <Grid.Col span={12}>
              <TextInput
                label={
                  <span>
                    ƒê·ªãa ch·ªâ <span style={{ color: "red" }}>*</span>
                  </span>
                }
                placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ"
                {...form.getInputProps("hospitalAddress")}
              />
            </Grid.Col>

            <Grid.Col span={{ base: 12, md: 6 }}>
              <TextInput
                label="Email b·ªánh vi·ªán"
                placeholder="Nh·∫≠p email (n·∫øu c√≥)"
                {...form.getInputProps("hospitalEmail")}
              />
            </Grid.Col>

            <Grid.Col span={{ base: 12, md: 6 }}>
              <TextInput
                label={
                  <span>
                    S·ªë t√†i kho·∫£n <span style={{ color: "red" }}>*</span>
                  </span>
                }
                placeholder="Nh·∫≠p s·ªë t√†i kho·∫£n"
                {...form.getInputProps("bankAccountNumber")}
              />
            </Grid.Col>

            <Grid.Col span={{ base: 12, md: 6 }}>
              <Select
                label={
                  <span>
                    Ng√¢n h√†ng <span style={{ color: "red" }}>*</span>
                  </span>
                }
                placeholder={banksLoading ? "ƒêang t·∫£i..." : "Ch·ªçn ng√¢n h√†ng"}
                data={bankOptions}
                searchable
                {...form.getInputProps("bankCode")}
                disabled={banksLoading}
              />
            </Grid.Col>

            <Grid.Col span={{ base: 12, md: 6 }}>
              <TextInput
                label={
                  <span>
                    Ph√∫t ƒë·∫øn tr·ªÖ t·ªëi ƒëa <span style={{ color: "red" }}>*</span>
                  </span>
                }
                placeholder="Nh·∫≠p s·ªë ph√∫t cho ph√©p ƒë·∫øn tr·ªÖ"
                type="number"
                {...form.getInputProps("latestCheckInMinutes")}
              />
            </Grid.Col>

            <Grid.Col span={12}>
              <PaginationSizeInput
                values={form.values.paginationSizeList
                  .slice()
                  .sort((a, b) => a - b)}
                onChange={(val) =>
                  form.setFieldValue("paginationSizeList", val)
                }
              />
            </Grid.Col>
          </Grid>

          <Group justify="flex-end" mt="xl">
            <Button type="submit" className="bg-blue-600 hover:bg-blue-700">
              L∆∞u thay ƒë·ªïi
            </Button>
          </Group>
        </form>
      </Paper>
    </div>
  );
};

export default SettingAdminPage;
